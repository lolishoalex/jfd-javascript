//Статические методы и свойства - нужны для того чтобы создавать
//поля и методы, которые принадлежет определенному классу, а не его объектам

class Car {
    static isCar(car) {//создаем статический метод
        return car instanceof Car
    }
    //ключевая особенность статического метода либо поля, в том
    //что для доступа к нему нам не нужно создавать экземпляр класса 
    //с помощью New

    //еще один пример создания static, теперь создадим поле
    static initialParams = {
        name: 'Audi',
        maxSpeed: 150,
    }

    //поле initialParams не принадлежит какому-то определенному объкту,
    //оно принадлежит всему классу, то есть сколько бы объктов машин
    //мы бы не создавали все равно поле initialParams будет пренадлежать только классу Car

    //Также стоит отметить что если в каком-то методе либо поле используется 
    //this, то уже наш метод либо поле никак не может быть статическим, его уже нужно 
    //делать обычным, если не используется this, то рационально сделать его статическим

    //Кроме того мы можен наши статические методы и поля делать приватными

    constructor(name, maxSpeed) {
        this.name = name || Car.initialParams.name
        this.maxSpeed = maxSpeed || Car.initialParams.maxSpeed
    }

    drive() {
        console.log(`The car ${this.name} are driving now.`)
    }
}

//const car = new Car('BMW', 200)
const car = new Car()//
const animal = {}

const isCar = Car.isCar(car)//получаем доступ к isCar
console.log(isCar)//true

/* const isCar = Car.isCar(animal)//получаем доступ к isCar
console.log(isCar)//false */

console.log(car)

car.isCar(animal)//error

//то есть, что бы получить доступ к статическому полю либо методу нужно
//написать название класса точка и написать название статического поля либо метода

Car.isCar()

//вообще статик нужен тогда, когда наше поле либо метод не 
//принадлежит конкретному объкту, а принадлежит классу. Или 
//когда внутри нашего метода не используется this.










